version: 2
jobs:
  build:
    working_directory: /var/www/code
    docker:
      - image: lastcallmedia/php:7.0-dev
    steps:
      - checkout
      - restore_cache:
          name: Restore NPM cache
          keys:
            - site-npm-{{ .Environment.CID }}-{{ checksum "package.json" }}
            - site-npm-{{ .Environment.CID }}-
      - run: {name: "NPM install", command: "npm install" }
      - save_cache:
          name: Save NPM cache
          key: site-npm-{{ .Environment.CID }}-{{ checksum "package.json" }}
          paths: [ node_modules ]
      - restore_cache:
          name: Restore Composer cache
          keys:
            - site-composer-{{ .Environment.CID }}-{{ checksum "composer.lock" }}
            - site-composer-{{ .Environment.CID }}-
      - run: {name: "Gulp install", command: "gulp install" }
      - save_cache:
          name: Save Composer cache
          key: site-composer-{{ .Environment.CID }}-{{ checksum "composer.lock" }}
          paths: [ vendor ]
      - run: {name: "Execute build", command: "gulp build" }
      - persist_to_workspace:
          root: /var/www
          paths: [code]

  test:
    working_directory: /var/www/code
    docker:
      - image: lastcallmedia/php:7.0-dev # Primary image
        environment:
          CID: 1 # Cache identifier.  Increment to create a fresh cache.
          DOCKER_ENV: ci
          APACHE_DOCROOT: /var/www/code/web
          MYSQL_USER: circle
          MYSQL_PASSWORD: circle
          MYSQL_DATABASE: circle
          MYSQL_HOST: 127.0.0.1
      - image: mysql:5.6
        environment:
          MYSQL_USER: circle
          MYSQL_PASSWORD: circle
          MYSQL_DATABASE: circle
          MYSQL_RANDOM_ROOT_PASSWORD: 1
    steps:
      - attach_workspace: {at: /var/www}
      - run: {name: 'Start Apache', command: '/usr/local/bin/apache2-foreground-enhanced', background: true}
      # @todo: Roll Dockerize into php container.
      - run:
          name: 'Install Dockerize'
          command: 'curl -L https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz | tar -C /usr/local/bin -xzv && chmod +x /usr/local/bin/dockerize'
          environment: {DOCKERIZE_VERSION: 0.6.0}
      - run: {name: "Check code", command: "gulp check" }
      - run: {name: 'Wait for MySQL', command: 'dockerize -wait tcp://localhost:3306 -timeout 10s'}
      - run: {name: 'Wait for Apache', command: 'dockerize -wait tcp://localhost:80 -timeout 5s'}
      - run:
          name: "Prepare site"
          command: |
            vendor/bin/drupal chain --file=$(pwd)/ci/prepare-site.yml
            git checkout web/sites/default/settings.php
            mkdir web/sites/simpletest
            chown -R $APACHE_RUN_USER:$APACHE_RUN_GROUP web/sites/default/files web/sites/simpletest
            chmod g+s web/sites/default/files web/sites/simpletest
      # Run PHPUnit as www-data to support BrowserTestBase installing the site.
      - run: {name: 'Run PHPUnit', command: 'su -s /bin/bash www-data -c "vendor/bin/phpunit --log-junit=/tmp/junit/phpunit.xml"'}
      - run: {name: 'Run Behat', command: 'vendor/bin/behat -f junit -o /tmp/junit'}
      - store_test_results: { path: '/tmp/junit' }

  deploy:
    working_directory: /var/www/code
    docker:
      - image: lastcallmedia/php:7.0-dev # Primary image
    steps:
      - attach_workspace: {at: /var/www}
      - run: {name: 'Check status', command: 'git status'}

workflows:
  version: 2
  build_test_release:
    jobs:
      - build
      - test: {requires: [build]}
      - deploy: {requires: [build]}
