# This CircleCI configuration executes 3 different jobs:
#   * build: Install dependencies and build static assets
#   * test: Run all unit and functional tests
#   * deploy: Push artifact code to a remote git repository.
#
# In this configuration, deployment happens regardless of testing outcome.
# Assuming you wait until tests pass before merging any PRs or deploying from dev
# to prod, this enables much faster local -> multidev deployment cycles without
# increasing risk.
#
version: 2
jobs:
  build:
    working_directory: /var/www/code
    docker:
      - image: lastcallmedia/php:7.0-dev
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn cache
          keys:
            - site-yarn-v1-{{ checksum "yarn.lock" }}
            - site-yarn-v1-
      - run: {name: "Yarn install", command: "yarn install --pure-lockfile" }
      - save_cache:
          name: Save Yarn cache
          key: site-yarn-v1-{{ checksum "yarn.lock" }}
          paths: [ node_modules ]
      - restore_cache:
          name: Restore Composer cache
          keys:
            - site-composer-v1-{{ checksum "composer.lock" }}
            - site-composer-v1-
      - run: {name: 'Composer install', command: 'composer install'}
      - save_cache:
          name: Save Composer cache
          key: site-composer-v1-{{ checksum "composer.lock" }}
          paths: [ vendor, web/core, web/modules/contrib, web/themes/contrib ]
      - run: {name: "Execute build", command: "gulp build" }
      - persist_to_workspace:
          root: /var/www
          paths: [code]

  test:
    working_directory: /var/www/code
    docker:
      - image: lastcallmedia/php:7.0-dev # Primary image
        environment:
          DOCKER_ENV: ci
          APACHE_DOCROOT: /var/www/code/web
          MYSQL_USER: circle
          MYSQL_PASSWORD: circle
          MYSQL_DATABASE: circle
          MYSQL_HOST: 127.0.0.1
      - image: mysql:5.6
        environment:
          MYSQL_USER: circle
          MYSQL_PASSWORD: circle
          MYSQL_DATABASE: circle
          MYSQL_RANDOM_ROOT_PASSWORD: 1
      - image: selenium/standalone-chrome
        name: selenium
    steps:
      - attach_workspace: {at: /var/www}
      - run: {name: 'Setup artifact directories', command: 'mkdir /tmp/junit /tmp/artifacts && chown $APACHE_RUN_USER:$APACHE_RUN_GROUP /tmp/junit'}
      # Run linting steps up front.  If these fail, they should provide fast feedback.
      - run: {name: 'ESLint', command: 'node_modules/.bin/eslint -f junit . > /tmp/junit/eslint.xml'}
      - run: {name: 'PHPCS', command: 'vendor/bin/phpcs --report-junit=/tmp/junit/phpcs.xml --report-summary'}
      - run: {name: 'Mannequin Snapshot', command: 'vendor/bin/mannequin snapshot -o /tmp/artifacts/mannequin'}
      - run: {name: 'Start Apache', command: '/usr/local/bin/apache2-foreground-enhanced', background: true}
      - run: {name: 'Wait for MySQL', command: 'dockerize -wait tcp://localhost:3306 -timeout 10s'}
      - run: {name: 'Wait for Apache', command: 'dockerize -wait tcp://localhost:80 -timeout 5s'}
      - run:
          name: "Prepare site"
          command: |
            vendor/bin/drupal chain --file=$(pwd)/.circleci/prepare-site.yml
            git checkout web/sites/default/settings.php
            mkdir web/sites/simpletest
            chown -R $APACHE_RUN_USER:$APACHE_RUN_GROUP web/sites/default/files web/sites/simpletest
            chmod g+s web/sites/default/files web/sites/simpletest
      # Run PHPUnit as www-data to support BrowserTestBase installing the site.
      - run: {name: 'Run PHPUnit', command: 'su -s /bin/bash www-data -c "vendor/bin/phpunit --log-junit=/tmp/junit/phpunit.xml"'}
      - run: {name: 'Run Behat', command: 'vendor/bin/behat -f junit -o /tmp/junit'}
      - run: {name: 'Run WDIO', command: 'node_modules/.bin/wdio wd/wdio.conf.js --b http://$(hostname) && cp -R wd/screenshots /tmp/artifacts/wdio', environment: {JUNIT: '/tmp/junit'}}
      - store_test_results: { path: '/tmp/junit' }
      - store_artifacts: {path: '/tmp/artifacts'}

  deploy:
    working_directory: /var/www/code
    docker:
      - image: lastcallmedia/php:7.0-dev # Primary image
        environment:
          GIT_AUTHOR_NAME: 'Last Call Media Automation'
          GIT_AUTHOR_EMAIL: 'sysadmin@lastcallmedia.com'
          DOWNSTREAM: ssh://codeserver.dev.58ceb48b-e86e-4c4d-beac-a9a886371247@codeserver.dev.58ceb48b-e86e-4c4d-beac-a9a886371247.drush.in:2222/~/repository.git
          HOST_KEY: '[codeserver.dev.58ceb48b-e86e-4c4d-beac-a9a886371247.drush.in]:2222 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSY3gnr0DrbqJJSnEFy6jazDmAdBm4Zs/EkWIQa7x31qgSYyYJMz5V+pk62lBf2BN42VtubwO83vW9G+yG2K1RGOvZJaK5GBvBb/Ws2ZPcp/4sNHpPzkdd75e5/Pk8AWA59XUbJcBWmrDrHMbWV1j2zqPPikxbqGeTTjSx4QR18LIRei5OwT6VQnaVnJqPAqFZ+oCbpr0DL96foL3UEY8EWT/6GH2cANEGZO4ppbhdDw4uG6TaI7S0lxWMQEVy+iwjCNH/nanjd73cwoYd90E0OVdgNDr3hVbIuE6sUW6UwlaAwuyOM/xJYPg1y0rF66958pyVJlZ9KD5A0kY3bHg7'
          # PMACHINE is a hidden environment variable that must be set.
          PSITE: scaffold
          PSRCENV: dev
    steps:
      - attach_workspace: {at: /var/www}
      - run: {name: 'Trust host key', command: 'mkdir -p ~/.ssh && echo $HOST_KEY >> ~/.ssh/known_hosts'}
      - run: {name: 'Set git committer', command: 'git config --global user.email "$GIT_AUTHOR_EMAIL" && git config --global user.name "$GIT_AUTHOR_NAME"'}
      - run: {name: 'Lean Composer install', command: 'composer install --no-dev -o'}
      - run: {name: 'Push Artifact', command: 'bin/artifact.sh -d $DOWNSTREAM -b $CIRCLE_BRANCH'}
      - run:
        name: 'Ensure Multidev'
        command: |
          curl -o /tmp/terminus.phar https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar && php /tmp/terminus.phar install
          terminus auth:login --machine-token=$PMACHINE
          terminus env:info "$PSITE.$CIRCLE_BRANCH" > /dev/null 2>&1 || { echo "Creating environment... " && terminus env:create "$PSITE.$PSRCENV" "$CIRCLE_BRANCH"}

workflows:
  version: 2
  build_test_release:
    jobs:
      - build
      - test: {requires: [build]}
      - deploy:
          requires: [build]

